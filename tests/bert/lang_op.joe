// Operator Tests
//
// Language tests should confine themselves to the basic test API.

//-----------------------------------------------------------------------------
// Arithmetic Operators

function testPlus() {
    assertEquals(1 + 2, 3);
    assertEquals("a" + "b", "ab");
    assertEquals("a" + 1, "a1");
    assertEquals(1 + "a", "1a");

    function bad() { #a + #b; }
    assertError(bad, "The '+' operator expects two Numbers or at least one String.");
}

function testMinus() {
    assertEquals(4 - 1, 3);
    assertEquals(1 - 4, -3);

    function bad() { 4 - "abc"; }
    assertError(bad, "The '-' operator expects two numeric operands.");
}

function testTimes() {
    assertEquals(4 * 2, 8);

    function bad() { 4 * "abc"; }
    assertError(bad, "The '*' operator expects two numeric operands.");
}

function testDivide() {
    assertEquals(4/2, 2);
    assertEquals(String(4/0), "Infinity");  // TODO: support Infinity,  NaN

    function bad() { 4 / "abc"; }
    assertError(bad, "The '/' operator expects two numeric operands.");
}

//-----------------------------------------------------------------------------
// Test Comparisons

function testEquals() {
    assertTrue(1 == 1);
    assertTrue("a" == "a");
    assertTrue(#k == #k);
    assertFalse(1 == 2);
    assertFalse("a" == #k);
}

function testNotEquals() {
    assertFalse(1 != 1);
    assertTrue(1 != 2);
    assertTrue("a" != #k);
}

function testComparisons() {
    assertTrue(0 < 1);
    assertFalse(1 < 1);
    assertTrue("a" < "b");
    assertFalse("b" < "a");

    assertTrue(0 <= 1);
    assertTrue(1 <= 1);
    assertFalse(2 <= 1);
    assertTrue("a" <= "b");
    assertTrue("a" <= "a");
    assertFalse("b" <= "a");

    assertFalse(0 > 0);
    assertTrue(1 > 0);
    assertFalse("a" > "a");
    assertTrue("b" > "a");

    assertTrue(1 >= 0);
    assertTrue(1 >= 1);
    assertFalse(1 >= 2);
    assertTrue("b" >= "a");
    assertTrue("b" >= "b");
    assertFalse("b" >= "c");

    function bad() { "a" > 1; }
    assertError(bad, "The '>' operator expects two Numbers or two Strings.");
}

//-----------------------------------------------------------------------------
// Logical Operators

function testAnd() {
    // With booleans
    assertTrue(true && true);
    assertFalse(true && false);
    assertFalse(false && true);
    assertFalse(false && false);

    // Returns first argument if first is falsey.
    assertFalse(false && 1);
    assertEquals(null && 1, null);

    // Returns second argument if first is truthy
    assertEquals(1 && 2, 2);
    assertEquals(1 && null, null);
}

function testOr() {
    // With booleans
    assertTrue(true || true);
    assertTrue(true || false);
    assertTrue(false || true);
    assertFalse(false || false);

    // Returns first argument if first is truthy.
    assertTrue(true || false);
    assertEquals(1 || null, 1);

    // Returns second argument if first is falsy
    assertEquals(false || 2, 2);
    assertEquals(null || 4, 4);
}

function testNot() {
    assertFalse(!true);
    assertFalse(!1);
    assertTrue(!false);
    assertTrue(!null);
}

//-----------------------------------------------------------------------------
// Assignment operators


function testAssignment() {
    var a = 1;
    var b;
    var c;
    c = b = a;
    assertEquals(a, 1);
    assertEquals(b, 1);
    assertEquals(c, 1);
}

//function testPlusEquals_var() {
//function testPlusEquals_property() {
//function testMinusEquals_var() {
//function testMinusEquals_property() {
//function testStarEquals_var() {
//function testStarEquals_property() {
//function testSlashEquals_var() {
//function testSlashEquals_property() {

//-----------------------------------------------------------------------------
// ++

//function testPlusPlus_pre_var() {
//function testPlusPlus_post_var() {
//function testPlusPlus_pre_prop() {
//function testPlusPlus_post_prop() {

//-----------------------------------------------------------------------------
// --

//function testMinusMinus_pre_var() {
//function testMinusMinus_post_var() {
//function testMinusMinus_pre_prop() {
//function testMinusMinus_post_prop() {

//-----------------------------------------------------------------------------
// Ternary Operator

//function testTernary() {

//-----------------------------------------------------------------------------
// in/ni Operators

//function testIN() {
//function testNI() {

//-----------------------------------------------------------------------------
// Helpers

//class Thing {}
