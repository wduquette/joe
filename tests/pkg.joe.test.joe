// Tests for the joe.test Test API

//-------------------------------------------------------------------------
// Basic Test API

function testAssertEQ_scalar() {
    assertEQ(5, 5);
    assertEQ("abc", "abc");
    assertError(\-> assertEQ("abc", 5), """
        Computed: String 'abc'
        Expected: Number '5'
        """
    );
}

function testAssertEQ_list() {
    var a = List.of("a", "b", "c");
    var b = List.of("a", "b", "c", "d");
    assertEQ(a, a);
    assertError(\-> assertEQ(a, b), """
        Computed: List [
            String 'a'
            String 'b'
            String 'c'
        ]
        Expected: List [
            String 'a'
            String 'b'
            String 'c'
            String 'd'
        ]
        """
    );
}

function testAssertEQ_set() {
    var a = Set.of("a", "b", "c");
    var b = Set.of("a", "b", "c", "d");
    assertEQ(a, a);
    assertError(\-> assertEQ(a, b), """
        Computed: Set {
            String 'a'
            String 'b'
            String 'c'
        }
        Expected: Set {
            String 'a'
            String 'b'
            String 'c'
            String 'd'
        }
        """
    );
}

function testAssertEQ_map() {
    var a = Map.of("a", 1.0, "b", 2.0);
    var b = Map.of("a", 1.0, "b", 2.0, "c", 3.0);
    assertEQ(a, a);
    assertError(\-> assertEQ(a, b), """
        Computed: Map {
            String 'a': Number '1'
            String 'b': Number '2'
        }
        Expected: Map {
            String 'a': Number '1'
            String 'b': Number '2'
            String 'c': Number '3'
        }
        """
    );
}

function testAssertT() {
    assertT(true);
    assertT("abc");

    function bad() { assertT(false); }
    assertError(bad, "Expected truthy value, got: Boolean 'false'.");
}

function testAssertF() {
    assertF(false);
    assertF(null);

    function bad() { assertF(true); }
    assertError(bad, "Expected falsey value, got: Boolean 'true'.");
}

function testFail() {
    function bad() { fail("Called fail()"); }
    assertError(bad, "Called fail()");
}

function testAssertError_gotError() {
    function bad() { throw "Simulated error."; }
    assertError(bad, "Simulated error.");
}

function testAssertError_gotError_withTrace() {
    function bad() { throw "Simulated error."; }
    assertError(bad, "Simulated error."
        , "In function bad()"
    );
}

function testAssertError_noError() {
    function ok() { return #ok; }
    function bad() { assertError(ok, "Error message"); }
    assertError(bad, "Expected error, got: Keyword '#ok'.");
}


function _good() {
    return "abc";
}

function _error() {
    assert 1 == 2, "Simulated Error";
}

