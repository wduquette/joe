// Tests for the joe.test Test API

//-------------------------------------------------------------------------
// Basic Test API

function testAssertEquals_scalar() {
    assertEquals(5, 5);
    assertEquals("abc", "abc");
    assertError(\-> assertEquals("abc", 5), """
        Computed: String 'abc'
        Expected: Number '5'
        """
    );
}

function testAssertEquals_list() {
    var a = List.of("a", "b", "c");
    var b = List.of("a", "b", "c", "d");
    assertEquals(a, a);
    assertError(\-> assertEquals(a, b), """
        Computed: List [
            String 'a'
            String 'b'
            String 'c'
        ]
        Expected: List [
            String 'a'
            String 'b'
            String 'c'
            String 'd'
        ]
        """
    );
}

function testAssertEquals_set() {
    var a = Set.of("a", "b", "c");
    var b = Set.of("a", "b", "c", "d");
    assertEquals(a, a);
    assertError(\-> assertEquals(a, b), """
        Computed: Set {
            String 'a'
            String 'b'
            String 'c'
        }
        Expected: Set {
            String 'a'
            String 'b'
            String 'c'
            String 'd'
        }
        """
    );
}

function testAssertEquals_map() {
    var a = Map.of("a", 1.0, "b", 2.0);
    var b = Map.of("a", 1.0, "b", 2.0, "c", 3.0);
    assertEquals(a, a);
    assertError(\-> assertEquals(a, b), """
        Computed: Map {
            String 'a': Number '1'
            String 'b': Number '2'
        }
        Expected: Map {
            String 'a': Number '1'
            String 'b': Number '2'
            String 'c': Number '3'
        }
        """
    );
}

function testAssertTrue() {
    assertTrue(true);
    assertTrue("abc");

    function bad() { assertTrue(false); }
    assertError(bad, "Expected truthy value, got: Boolean 'false'.");
}

function testAssertFalse() {
    assertFalse(false);
    assertFalse(null);

    function bad() { assertFalse(true); }
    assertError(bad, "Expected falsey value, got: Boolean 'true'.");
}

function testFail() {
    function bad() { fail("Called fail()"); }
    assertError(bad, "Called fail()");
}

function testAssertError_gotError() {
    function bad() { throw "Simulated error."; }
    assertError(bad, "Simulated error.");
}

function testAssertError_gotError_withTrace() {
    function bad() { throw "Simulated error."; }
    assertError(bad, "Simulated error."
        , "In function bad()"
    );
}

function testAssertError_noError() {
    function ok() { return #ok; }
    function bad() { assertError(ok, "Error message"); }
    assertError(bad, "Expected error, got: Keyword '#ok'.");
}

//-------------------------------------------------------------------------
// Advanced Test API

function testCheck_eq() {
    check("abc").eq("abc");

    function bad() { check("abc").eq("def"); }
    checkCatch(bad)
        .message("Expected String 'def', got: String 'abc'.");
}

function testCheck_isTrue() {
    check(true).isTrue();
    check(1).isTrue();
    check("abc").isTrue();

    function bad() { check(false).isTrue(); }
    checkCatch(bad)
        .message("Expected true, got: Boolean 'false'.");
}

function testCheck_isFalse() {
    check(false).isFalse();
    check(null).isFalse();

    function bad() { check(true).isFalse(); }
    checkCatch(bad)
        .message("Expected false, got: Boolean 'true'.");
}

function testCheck_isNull() {
    check(null).isNull();

    function bad() { check("abc").isNull(); }
    checkCatch(bad)
        .message("Expected null, got: String 'abc'.");
}

function testCheck_isNonNull() {
    check(1).isNonNull();

    function bad() { check(null).isNonNull(); }
    checkCatch(bad)
        .message("Expected non-null, got: 'null'.");
}

function testCheck_isEmpty() {
    check([]).isEmpty();
    check("").isEmpty();

    checkCatch(\-> check([1, 2]).isEmpty())
        .message("Expected isEmpty(), got: List '[1, 2]'.");
}

function testCheck_containsAll() {
    check([#a, #b, #c]).containsAll(#a, #b);

    checkCatch(\-> check([#a]).containsAll(#a, #b))
        .message("Expected collection to contain Keyword '#b', got: List '[#a, #b]'.");
}

function testCheck_hasType() {
    check(true).hasType(Boolean);
    check(1).hasType(Number);
    check("abc").hasType(String);
    check(null).hasType(null);

    function bad() { check(true).hasType(String); }
    checkCatch(bad)
        .message("Expected type 'String', got: Type 'Boolean'.");
}

function testCheck_hasTypeName() {
    check(true).hasTypeName("Boolean");
    check(1).hasTypeName("Number");
    check("abc").hasTypeName("String");

    function bad() { check(true).hasTypeName("String"); }
    checkCatch(bad)
        .message("Expected type name 'String', got: String 'Boolean'.");
}

function testCheckCatch_isOK() {
    checkCatch(_good).isOK();
}

function testCheckCatch_isError() {
    checkCatch(_error)
        .isError()
        .type("AssertError")
        .message("Simulated Error");
}

function testCheckCatch_fail_isOK() {
    function bad() { checkCatch(_error).isOK(); }

    checkCatch(bad)
        .message("Expected no error, got: 'Simulated Error'.");
}

function testCheckCatch_fail_isError() {
    function bad() { checkCatch(_good).isError(); }

    checkCatch(bad)
        .message("Expected an error, got: String 'abc'.");
}

function testCheckCatch_fail_message() {
    function bad() { checkCatch(_error).message("Ouch"); }

    checkCatch(bad)
        .message("Expected message 'Ouch', got: 'Simulated Error'.");
}

function testCheckCatch_fail_type() {
    function bad() { checkCatch(_error).type("JoeError"); }

    checkCatch(bad)
        .message("Expected error type 'JoeError', got: 'AssertError'.");
}

function _good() {
    return "abc";
}

function _error() {
    assert 1 == 2, "Simulated Error";
}

