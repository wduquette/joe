// Tests the "let" statement and pattern syntax

//-----------------------------------------------------------------------------
// Simple variable binding

function testOneVar() {
    let a = 1;
    assertEquals(a, 1);
}
function testCapture() {
    let [a, b=[c, d], e] = [1, [2, 3], 4];
    assertEquals(a, 1);
    assertEquals(b, [2, 3]);
    assertEquals(c, 2);
    assertEquals(d, 3);
    assertEquals(e, 4);
}

//-----------------------------------------------------------------------------
// List Patterns

function testList_noMatch() {
    assertError(\-> { let [a, b] = 5; },
        "'let' pattern failed to match target value.");
}

function testList_noTail() {
    let [a, b] = [1, 2];
    assertEquals(a, 1);
    assertEquals(b, 2);
}

function testList_emptyTail() {
    let [a, b : c] = [1, 2];
    assertEquals(a, 1);
    assertEquals(b, 2);
    assertEquals(c, []);
}

function testList_fullTail() {
    let [a, b : c] = [1, 2, 3, 4];
    assertEquals(a, 1);
    assertEquals(b, 2);
    assertEquals(c, [3, 4]);
}

function testNested() {
    let [a, [b, c], d] = [1, [2, 3], 4];
    assertEquals(a, 1);
    assertEquals(b, 2);
    assertEquals(c, 3);
    assertEquals(d, 4);
}

//-----------------------------------------------------------------------------
// Literal Constants

function testLiteralConstant() {
    // NOTE: We use list patterns here because `let` rejects a pattern
    // that lacks a variable.

    let [a, true] = [1, true];
    assertEquals(a, 1);

    let [b, false] = [2, false];
    assertEquals(b, 2);

    let [c, null] = [3, null];
    assertEquals(c, 3);

    let [d, 99] = [4, 99];
    assertEquals(d, 4);

    let [e, "abc"] = [5, "abc"];
    assertEquals(e, 5);

    let [f, #abc] = [6, #abc];
    assertEquals(f, 6);

    assertError(\-> { let [a, 4] = 5; },
        "'let' pattern failed to match target value.");
}

//-----------------------------------------------------------------------------
// Interpolated Expressions

function testInterpolatedExpression() {
    var x = 10;
    var y = 20;
    let [a, $(x + y)] = [5, 30];
    assertEquals(a, 5);
}

function testInterpolatedVariable() {
    var first = "Joe";
    let [$first, last] = ["Joe", "Pro"];
    assertEquals(last, "Pro");
}

//-----------------------------------------------------------------------------
// Wildcards

function testWildcard() {
    let [a, _] = [1, #abc];
    assertEquals(a, 1);

    let [b, _withName] = [2, #xyz];
    assertEquals(b, 2);
}

//-----------------------------------------------------------------------------
// Map Patterns

function testMap_noMap() {
    assertError(\-> { let {#abc: a} = 5; },
        "'let' pattern failed to match target value.");
}

function testMap_missingKey() {
    assertError(\-> { let {#abc: a} = {#def: 5}; },
        "'let' pattern failed to match target value.");
}

function testMap_badValue() {
    assertError(\-> { let {#abc: a, #def: 7} = {#abc: 5, #def: 6}; },
        "'let' pattern failed to match target value.");
}

function testMap_good() {
    let {"abc": a} = {"abc": 5, "def": 6};
    assertEquals(a, 5);
}

function testMap_withInstance_stringKeys() {
    let {"id": i, "color": c} = Thing(123, "red");
    assertEquals(i, 123);
    assertEquals(c, "red");
}

function testMap_withInstance_keywordKeys() {
    let {#id: i, #color: c} = Thing(123, "red");
    assertEquals(i, 123);
    assertEquals(c, "red");
}

function testMap_withInstance_badKeyType() {
    assertError(\-> { let {123: i, #color: c} = Thing(123, "red"); },
        "'let' pattern failed to match target value.");
}

function testMap_withInstance_unknownKey() {
    assertError(\-> { let {#nonesuch: i, #color: c} = Thing(123, "red"); },
        "'let' pattern failed to match target value.");
}

function testMap_fancyKey() {
    var key = #joe;
    let {$key: value} = {#joe: #language};
    assertEquals(value, #language);
}

//-----------------------------------------------------------------------------
// Instance Patterns

function testInstance_notInstance() {
    assertError(\-> { let Thing{#id: id} = "abc"; },
        "'let' pattern failed to match target value.");
}

function testInstance_wrongType() {
    var thing = Thing(123, "red");

    assertError(\-> { let Gizmo{#id: id} = thing; },
        "'let' pattern failed to match target value.");
}

function testInstance_badField() {
    var thing = Thing(123, "red");

    assertError(\-> { let Thing{#id: id, #style: s} = thing; },
        "'let' pattern failed to match target value.");
}

function testInstance_good() {
    var thing = Thing(123, "red");

    let Thing{#id: i, #color: c} = thing;
    assertEquals(i, thing.id);
    assertEquals(c, thing.color);
}

function testInstance_supertype_good() {
    var gizmo = Gizmo(123, "red");

    let Thing{#id: i, #color: c} = gizmo;
    assertEquals(i, gizmo.id);
    assertEquals(c, gizmo.color);
}

function testInstance_record() {
    var person = Person("Joe", 80);

    let Person{#name: n, #age: a} = person;
    assertEquals(n, person.name);
    assertEquals(a, person.age);
}

//-----------------------------------------------------------------------------
// Record Patterns

function testRecord_notRecord() {
    // Thing is a normal class instance, not a record.
    assertError(\-> { let Thing(id, color) = Thing(123, "red"); },
        "'let' pattern failed to match target value.");
}

function testRecord_wrongType() {
    var person = Person("Joe", 80);

    assertError(\-> { let Cowboy(name, age) = person; },
        "'let' pattern failed to match target value.");
}

function testRecord_good() {
    var person = Person("Joe", 80);

    let Person(name, age) = person;
    assertEquals(name, person.name);
    assertEquals(age, person.age);
}

//-----------------------------------------------------------------------------
// Helpers

class Thing {
    method init(id, color) {
        @id = id;
        @color = color;
    }
}

class Gizmo extends Thing {
    method init(id, color) {
        super.init(id, color);
    }
}

record Person(name, age) {}

