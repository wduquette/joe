// Tests for type.joe.console.Path.

function testInitializer() {
    var p = Path("root/file.txt");
    assertEQ(Joe.typeOf(p), Path);
    assertEQ(p.getFileName(), Path("file.txt"));
    assertEQ(p.getParent(), Path("root"));
    assertEQ(p.getNameCount(), 2);
    assertEQ(p.getName(0), Path("root"));
    assertEQ(p.getName(1), Path("file.txt"));
    assertF(p.isAbsolute());
    assertEQ(p.toString(), "root/file.txt");

    assertEQ(Path("root", "foo", "bar"), Path("root/foo/bar"));
}

function testCompare() {
    var p1 = Path("root/fileA.txt");
    var p2 = Path("root/fileB.txt");

    assertEQ(Path.compare(p1, p1), 0);
    assertEQ(Path.compare(p1, p2), -1);
    assertEQ(Path.compare(p2, p1), 1);
}

function testEndsWith() {
    var p = Path("root/ball/fileA.txt");
    assertT(p.endsWith(p.getFileName()));
    assertF(p.endsWith(p.getParent()));
}

function testNormalize() {
    var p = Path("root/foo/../bar/file.txt");
    assertEQ(p.normalize(), Path("root/bar/file.txt"));
}

function testRelativize() {
    var p1 = Path("/root/foo");
    var p2 = Path("/root/foo/bar/file.text");
    assertEQ(p1.relativize(p2), Path("bar/file.text"));
}

function testResolve() {
    var p1 = Path("/root/foo");
    var p2 = Path("bar/file.text");
    var p3 = Path("/other/tree");

    assertEQ(p1.resolve(p2), Path("/root/foo/bar/file.text"));
    assertEQ(p1.resolve(p3), p3);
}

function testStartsWith() {
    var p = Path("root/ball/fileA.txt");
    assertT(p.startsWith(p.getParent()));
    assertF(p.startsWith(p.getFileName()));
}

function testSubpath() {
    var p = Path("/root/foo/bar/file.text");
    assertEQ(p.subpath(2), Path("bar/file.text"));
    assertEQ(p.subpath(0, 2), Path("root/foo"));
}

function testToAbsolute() {
    var p1 = Path(".");
    var p2 = p1.toAbsolutePath();
    assertT(p2.isAbsolute());

    // Absolute paths are host-dependent; just verify that the new
    // path begins with a "/", making it an absolute path.
    assertT(p2.toString().startsWith("/"));
}
