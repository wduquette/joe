// type.joe.Set.joe: Set tests

function testInitializer() {
    var set1 = {};
    assertT(set1.isEmpty());
    assertEQ(set1.size(), 0);

    var set2 = {#a, #b};
    assertF(set2.isEmpty());
    assertEQ(set2.size(), 2);
}

function testAdd() {
    var set = {};
    assertT(set.add(#a));
    assertEQ(set, {#a});
}

function testAddAll() {
    var set1 = {#a, #b};
    var set2 = {#c};
    assertT(set2.addAll(set1));
    assertEQ(set2, {#a, #b, #c});
}

function testClear() {
    var set = {#a};
    set.clear();
    assertT(set.isEmpty());
    assertEQ(set.size(), 0);
}

function testContains() {
    var set = {#a};
    assertT(set.contains(#a));
    assertF(set.contains(#b));
}

function testContainsAll() {
    var set = {#a, #b, #c, #d};
    assertT(set.containsAll({#a, #c}));
    assertF(set.containsAll({#c, #e}));
}

function testCopy() {
    var set = {#a};
    var set2 = set.copy();
    assertEQ(set2, set);
    set2.clear();
    assertF(set2 == set);
}

function testFilter() {
    var set = {1, 2, 3, 4, 5};
    var filtered = set.filter(\x -> x > 3);
    assertEQ(filtered, {4, 5});
}

function testIsEmpty() {
    assertT({}.isEmpty());
    assertF({#a}.isEmpty());
}

function testMap() {
    var set = {1, 2, 3};
    var filtered = set.map(Joe.stringify);
    assertEQ(filtered, {"1", "2", "3"});
}

function testRemove() {
    var set = {#a, #b, #c};
    assertT(set.remove(#b));
    assertEQ(set, {#a, #c});
    assertF(set.remove(#d));
    assertEQ(set, {#a, #c});
}

function testRemoveAll() {
    var set = {#a, #b, #c};
    assertT(set.removeAll({#b}));
    assertEQ(set, {#a, #c});
}

function testSize() {
    assertEQ({}.size(), 0);
    assertEQ({#a, #b}.size(), 2);
}

function testSorted_string() {
    var list = {"b", "c", "a", "d"}.sorted();
    assertEQ(list, ["a", "b", "c", "d"]);
}

function testSorted_nonString_noComparator() {
    assertError(\ -> Set.of(#a, #b).sorted(),
        "Expected two strings or two numbers.");
}

function testSorted_nonString_comparator() {
    function comp(a, b) {
        return Joe.compare(Joe.stringify(a), Joe.stringify(b));
    }

    var list = {#a, #b, #c, #d}.sorted(comp);
    assertEQ(list, [#a, #b, #c, #d]);
}

function testToString() {
    assertEQ({#a, #b}.toString(), "{#a, #b}");
}
