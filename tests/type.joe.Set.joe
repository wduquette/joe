// type.joe.Set.joe: Set tests

function testInitializer() {
    var set1 = Set();
    check(set1.isEmpty()).isTrue();
    check(set1.size()).eq(0);

    var set2 = Set(#a, #b);
    check(set2.isEmpty()).isFalse();
    check(set2.size()).eq(2);
}

function testAdd() {
    var set = Set();
    check(set.add(#a)).isTrue();
    check(set).eq(Set(#a));
}

function testAddAll() {
    var set1 = Set(#a, #b);
    var set2 = Set(#c);
    check(set2.addAll(set1)).isTrue();
    check(set2).eq(Set(#a, #b, #c));
}

function testClear() {
    var set = Set(#a);
    set.clear();
    check(set.isEmpty()).isTrue();
    check(set.size()).eq(0);
}

function testContains() {
    var set = Set(#a);
    check(set.contains(#a)).isTrue();
    check(set.contains(#b)).isFalse();
}

function testContainsAll() {
    var set = Set(#a, #b, #c, #d);
    check(set.containsAll(Set(#a, #c))).isTrue();
    check(set.containsAll(Set(#c, #e))).isFalse();
}

function testCopy() {
    var set = Set(#a);
    var set2 = set.copy();
    check(set2).eq(set);
    set2.clear();
    check(set2 == set).isFalse();
}

function testFilter() {
    var set = Set(1, 2, 3, 4, 5);
    var filtered = set.filter(\x -> x > 3);
    check(filtered).eq(Set(4, 5));
}

function testIsEmpty() {
    check(Set().isEmpty()).isTrue();
    check(Set(#a).isEmpty()).isFalse();
}

function testMap() {
    var set = Set(1, 2, 3);
    var filtered = set.map(Joe.stringify);
    check(filtered).eq(Set("1", "2", "3"));
}

function testRemove() {
    var set = Set(#a, #b, #c);
    check(set.remove(#b)).isTrue();
    check(set).eq(Set(#a, #c));
    check(set.remove(#d)).isFalse();
    check(set).eq(Set(#a, #c));
}

function testRemoveAll() {
    var set = Set(#a, #b, #c);
    check(set.removeAll(Set(#b))).isTrue();
    check(set).eq(Set(#a, #c));
}

function testSize() {
    check(Set().size()).eq(0);
    check(Set(#a, #b).size()).eq(2);
}

function testSorted_string() {
    var list = Set("b", "c", "a", "d").sorted();
    check(list).eq(["a", "b", "c", "d"]);
}

function testSorted_nonString_noComparator() {
    assertError(\ -> Set(#a, #b).sorted(),
        "Expected two strings or two numbers.");
}

function testSorted_nonString_comparator() {
    function comp(a, b) {
        return Joe.compare(Joe.stringify(a), Joe.stringify(b));
    }

    var list = Set(#a, #b, #c, #d).sorted(comp);
    check(list).eq([#a, #b, #c, #d]);
}

function testToString() {
    check(Set(#a, #b).toString()).eq("Set(#a, #b)");
}
