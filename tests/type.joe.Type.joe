// Type-type tests.

//-------------------------------------------------------------------------
// The Type type's own info

function testName() {
    check(Type.name()).eq("Type");
}

//-------------------------------------------------------------------------
// Type and Value Introspection

class Thing {
    method init(id, color) {
        this.id = id;
        this.color = color;
    }
}

function testFieldNames() {
    check(Type.fieldNames("abc")).eq([]);
    check(Type.fieldNames(String)).eq([]);

    check(Type.fieldNames(Thing)).eq([]);
    Thing.x = 5;
    check(Type.fieldNames(Thing)).eq(["x"]);

    var thing = Thing(123, "red");
    check(Type.fieldNames(thing).sorted()).eq(["color", "id"]);
}

function testIsOpaqueValue() {
    check(Type.isOpaqueValue(JoeTest.OPAQUE)).isTrue();
    check(Type.isOpaqueValue("abc")).isFalse();
}

function testIsType() {
    check(Type.isType(String)).isTrue();
    check(Type.isType("abc")).isFalse();
}

function testNameOf() {
    check(Type.nameOf(String)).eq("String");

    assertError(\-> Type.nameOf("abc"),
        "Expected Joe type, got: String 'abc'.");
}

function testTypeOf() {
    var thing = Thing(123, "red");

    check(Type.typeOf("abc")).eq(String);
    check(Type.typeOf(String)).eq(Type);
    check(Type.typeOf(thing)).eq(Thing);
    check(Type.typeOf(Thing)).eq(Type);
    check(Type.typeOf(Type)).eq(Type);
}
