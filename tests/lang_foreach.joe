// Tests for the `foreach` statement
//
// Language tests should confine themselves to the basic test API.

//-----------------------------------------------------------------------------
// Simple `foreach`

// Basic foreach loop
function testForeach_simple() {
    var list = ["a", "b", "c"];
    var result = [];

    foreach (i : list)
        result.add(i);

    assertEquals(result, list);
}

// Foreach loop with underscore variable
function testForeach_underscore() {
    var list = ["a", "b", "c"];
    var result = [];

    foreach (_ : list)
        result.add(_);

    assertEquals(result, list);
}


// Basic foreach loop with block.
function testForeach_block() {
    var list = ["a", "b", "c"];
    var result = [];

    foreach (i : list) {
        result.add(i);
    }

    assertEquals(result, list);
}

// Basic foreach loop with break.
function testForeach_break() {
    var list = ["a", "b", "c"];
    var result = [];

    foreach (i : list) {
        if (i == "b") break;
        result.add(i);
    }

    assertEquals(result, ["a"]);
}

// Basic foreach loop with continue
function testForeach_continue() {
    var list = ["a", "b", "c"];
    var result = [];

    foreach (i : list) {
        if (i == "b") continue;
        result.add(i);
    }

    assertEquals(result, ["a", "c"]);
}

// Test that the foreach loop has its own scope.
function testForeach_hasOwnScope() {
    foreach (i : [1]) {
        // Do nothing
    }

    assertError(\-> i, "Undefined variable: 'i'.");
}

//-----------------------------------------------------------------------------
// `foreach` with pattern-binding

function testBind_basic() {
    var x = "outer x";
    var y = "outer y";
    var list = [[#a, 1], [#b, 2], #nonesuch,  [#c, 3]];
    var result = [];

    foreach ([x, y] : list) {
        result.add(x.toString() + y);
    }

    assertEquals(result, ["#a1", "#b2", "#c3"]);
    assertEquals(x, "outer x");
    assertEquals(y, "outer y");
}

function testBind_break() {
    var list = [[#a, 1], [#b, 2], #nonesuch,  [#c, 3]];
    var result = [];

    foreach ([x, _] : list) {
        if (x == #b) break;
        result.add(x);
    }

    assertEquals(result, [#a]);
}

function testBind_continue() {
    var list = [[#a, 1], [#b, 2], #nonesuch,  [#c, 3]];
    var result = [];

    foreach ([x, _] : list) {
        if (x == #b) continue;
        result.add(x);
    }

    assertEquals(result, [#a, #c]);
}

function testBind_hasOwnScope() {
    var list = [[#a, 1], [#b, 2]];
    foreach ([x, _] : list) {
        // Do nothing
    }

    assertError(\-> x, "Undefined variable: 'x'.");
}

function testBind_canInterpolate() {
    var list = [[#a, 2], [#b, 2]];
    var x = 2;
    var result;

    // Interpolations are done *once* prior to loop start.
    // This should match both items, but if the $x is interpolated
    // again we'll miss [#b, 2].
    foreach ([x, $x] : list) {
        result = x;
    }
    assertEquals(result, #b);
}

function testBind_canBindToItem() {
    var list = [[#a, 2]];
    foreach (a@[b, c] : list) {
        assertEquals(a, [#a, 2]);
        assertEquals(b, #a);
        assertEquals(c, 2);
    }
}
