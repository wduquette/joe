// String type tests

function testCharAt() {
    assertEQ("abc".charAt(0), "a");
    assertEQ("abc".charAt(2), "c");
    assertEQ("abc".charAt(2.9), "c");

    function bad1() { "abc".charAt(-1); }
    function bad2() { "abc".charAt(3); }
    assertError(bad1, "Expected 0 <= index < 3, got: Number '-1'.");
    assertError(bad2, "Expected 0 <= index < 3, got: Number '3'.");
}

function testContains() {
    assertT("abcdef".contains("bcd"));
    assertF("abcdef".contains("123"));
}

function testEndsWith() {
    assertT("abcdef".endsWith("def"));
    assertF("abcdef".endsWith("cde"));
}

function testEqualsIgnoreCase() {
    assertT("abc".equalsIgnoreCase("ABC"));
    assertF("abc".equalsIgnoreCase("ABCD"));
}

function testIndent() {
    assertEQ("abc".indent(2), "  abc");
}

function testIndexOf() {
    assertEQ("abcdefghi".indexOf("xyz"), -1);
    assertEQ("abcdefghi".indexOf("def"), 3);

    assertEQ("abcabcabc".indexOf("bc", 2), 4);
    assertEQ("abcdeabcde".indexOf("c", 3, 6), -1);
}

function testIsBlank() {
    assertF("abc".isBlank());
    assertT("   ".isBlank());
    assertT("".isBlank());
}

function testIsEmpty() {
    assertF("abc".isEmpty());
    assertF("   ".isEmpty());
    assertT("".isEmpty());
}

function testJoin() {
    assertEQ(String.join(",", []), "");
    assertEQ(String.join(",", ["a", "b"]), "a,b");
    assertEQ(String.join(",", [1, 2]), "1,2");
}

function testLastIndexOf() {
    assertEQ("abcdefghi".lastIndexOf("xyz"), -1);
    assertEQ("abcabc".lastIndexOf("b"), 4);

    assertEQ("abcabc".lastIndexOf("b", 3), 1);
}

function testLength() {
    assertEQ("abc".length(), 3);
}

function testLines() {
    assertEQ(" abc ".lines(), [" abc "]);
    assertEQ(" abc \n def ".lines(), [" abc ", " def "]);
}

function testMatches() {
    assertT("abc".matches("[a-z]+"));
    assertF("123".matches("[a-z]+"));
}

function testRepeat() {
    assertEQ("abc".repeat(0), "");
    assertEQ("abc".repeat(1), "abc");
    assertEQ("abc".repeat(2), "abcabc");

    function bad() { "abc".repeat(-1); }

    assertError(bad, "Expected non-negative count, got: Number '-1'.");
}

function testReplace() {
    assertEQ("One cow, two cow.".replace("cow", "pig"),
        "One pig, two pig.");
}

function testReplaceAll() {
    assertEQ("One cow, two cow.".replaceAll("[aeiou]", "*"),
        "On* c*w, tw* c*w.");
}

function testReplaceFirst() {
    assertEQ("One cow, two cow.".replaceFirst("[aeiou]", "*"),
        "On* cow, two cow.");
}

function testSplit() {
    assertEQ("abc,def,ghi".split(","),
        ["abc", "def", "ghi"]);
}

function testSplitWithDelimiters() {
    assertEQ("abc,def,ghi".splitWithDelimiters(","),
        ["abc", ",", "def", ",", "ghi"]);
}

function testStartsWith() {
    assertT("abcdef".startsWith("abc"));
    assertF("abcdef".startsWith("bcd"));
}

function testStrip() {
    assertEQ("  abc  ".strip(), "abc");
}

function testStripIndent() {
    assertEQ("   abc".stripIndent(), "abc");
}

function testStripLeading() {
    assertEQ("  abc  ".stripLeading(), "abc  ");
}

function testStripTrailing() {
    assertEQ("  abc  ".stripTrailing(), "  abc");
}

function testSubstring() {
    var txt = "abcdefghi";
    assertEQ(txt.substring(3), "defghi");
    assertEQ(txt.substring(3, 6), "def");
}

function testToLowerCase() {
    assertEQ("ABC".toLowerCase(), "abc");
}

function testToString() {
    assertEQ("AbC".toString(), "AbC");
}

function testToUpperCase() {
    assertEQ("abc".toUpperCase(), "ABC");
}
