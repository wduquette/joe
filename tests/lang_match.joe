// Tests for the "match" statement.
//
// Language tests should confine themselves to the basic test API.
//
// Pattern syntax and matching is tested in lang_let.joe.  The `match` tests
// confine themselves to the `match` statement itself.

function testMatch_firstCase() {
    var list = [1, 2];
    var result = null;

    match (list) {
        case [a, 2] -> result = a;
        default -> result = #fail;
    }
    assertEQ(result, list[0]);
}

function testMatch_secondCase() {
    var list = [1, 2];
    var result = null;

    match (list) {
        case [1, b] -> result = b;
        default -> result = #fail;
    }
    assertEQ(result, list[1]);
}

function testMatch_defaultCase() {
    var list = [1, 2];
    var result = null;

    match (list) {
        case [2, 3] -> result = #fail;
        default -> result = #ok;
    }
    assertEQ(result, #ok);
}

function testMatch_noDefault() {
    var list = [1, 2];
    var result = #ok;

    match (list) {
        case [2, 3] -> result = #fail;
    }
    assertEQ(result, #ok);
}

function testMatch_caseScope_success() {
    var list = [1, 2];
    var a = "A";
    var result = null;

    match (list) {
        case [a, 2] -> result = a;
        default -> result = #fail;
    }
    assertEQ(result, list[0]);
    assertEQ(a, "A");
}

function testMatch_caseScope_default() {
    var list = [1, 3];
    var a = "A";
    var result = null;

    match (list) {
        case [a, 2] -> result = a;
        default -> result = a;
    }
    assertEQ(result, "A");
    assertEQ(a, "A");
}

function testMatch_finalWildcard() {
    var list = [1, 3];
    var result = null;

    match (list) {
        case [a, 2] -> result = #fail;
        case _ -> result = #ok;
        default -> result = #fail;
    }
    assertEQ(result, #ok);
}

function testVarTarget() {
    var map = {#b: 2};
    var result;

    match (map) {
        case {#a: a} -> { result = a; }
        case {#b: b} -> { result = b; }
        default -> { result = "no match"; }
    }
    assertEQ(result, 2);
}

function testInterpolatedConstant() {
    var tag = #b;
    var map = {tag: 2};
    var result;

    match (map) {
        case {#a: a} -> { result = a; }
        case {$tag: b} -> { result = b; }
        default -> { result = "no match"; }
    }
    assertEQ(result, 2);
}

// Verify that a function can close over pattern variables.
function testMatch_WithClosures() {
    function getFunc(map) {
        match (map) {
            case {#a: a} -> { return \-> "a" + a; }
            case {#b: b} -> { return \-> "b" + b; }
            default -> { return \-> "no match"; }
        }
    }

    var f1 = getFunc({#a: 1});
    assertEQ(f1(), "a1");

    var f2 = getFunc({#b: 2});
    assertEQ(f2(), "b2");

    var f3 = getFunc({#c: 3});
    assertEQ(f3(), "no match");
}

function testGuard() {
    var list = [1, 2];
    var result;

    match (list) {
        // Fails: pattern doesn't match
        case [0, 1]            -> { result = #a; }

        // Fails: pattern matches, guard is false
        case [a, b] if a == 10 -> { result = #b; }

        // Succeeds: pattern matches, guard is true
        case [a, b] if a == 1  -> { result = #c; }

        // Skipped because of previous match
        default                -> { result = #d; }
    }

    assertEQ(result, #c);
}

function testCanBindToItem() {
    var list = [#a, 2];
    match (list) {
        case a@[b, c] -> {
            assertEQ(a, [#a, 2]);
            assertEQ(b, #a);
            assertEQ(c, 2);
        }
        default -> fail("Didn't match target.");
    }
}
