// Joe singleton tests.

//-------------------------------------------------------------------------
// Helper types

class Thing {
    method init(id, color) {
        this.id = id;
        this.color = color;
    }
}

class Gizmo extends Thing {
    method init(id, color) { super.init(id, color); }
}

class MyTextBuilder extends TextBuilder {
}

//-----------------------------------------------------------------------------
// compare()

function testCompare_string() {
    check(Joe.compare("a", "b")).eq(-1);
    check(Joe.compare("b", "b")).eq(0);
    check(Joe.compare("c", "b")).eq(1);
}

function testCompare_number() {
    check(Joe.compare(0, 1)).eq(-1);
    check(Joe.compare(1, 1)).eq(0);
    check(Joe.compare(2, 1)).eq(1);
}

function testCompare_mismatch() {
    checkCatch(\-> Joe.compare(1, #a))
        .message("Expected two strings or two numbers.");
}

//-----------------------------------------------------------------------------
// Joe.getFieldNames()

function testGetFieldNames() {
    check(Joe.getFieldNames("abc")).eq([]);
    check(Joe.getFieldNames(String)).eq([]);

    check(Joe.getFieldNames(Thing)).eq([]);
    Thing.x = 5;
    check(Joe.getFieldNames(Thing)).eq(["x"]);

    var thing = Thing(123, "red");
    check(Joe.getFieldNames(thing).sorted()).eq(["color", "id"]);
}

//-----------------------------------------------------------------------------
// Joe.isOpaque()

function testIsOpaque() {
    check(Joe.isOpaque(JoeTest.OPAQUE)).isTrue();
    check(Joe.isOpaque("abc")).isFalse();
}

//-----------------------------------------------------------------------------
// Joe.isType()

function testIsType() {
    check(Joe.isType(String)).isTrue();
    check(Joe.isType("abc")).isFalse();
}

//-------------------------------------------------------------------------
// Joe.name()

function testName() {
    check(Joe.name()).eq("Joe");
}

//-----------------------------------------------------------------------------
// Joe.stringify()

// This just just verifies that the function exists; specific types
// test their own stringification.
function testStringify() {
    check(Joe.stringify("abc")).eq("abc");
    check(Joe.stringify(1.0)).eq("1");
}

//-----------------------------------------------------------------------------
// Joe.supertypeOf()

function testSupertypeOf() {
    // Native Joe
    check(Joe.supertypeOf(String)).isNull();

    // Scripted base class
    check(Joe.supertypeOf(Thing)).isNull();

    // Subclass of scripted base class
    check(Joe.supertypeOf(Gizmo)).eq(Thing);

    // Native base class
    check(Joe.supertypeOf(TextBuilder)).eq(null);

    // Subclass of native base class
    check(Joe.supertypeOf(MyTextBuilder)).eq(TextBuilder);
}

//-----------------------------------------------------------------------------
// Joe.typeOf()

function testTypeOf() {
    var thing = Thing(123, "red");

    check(Joe.typeOf("abc")).eq(String);
    check(Joe.typeOf(String)).eq(Type);
    check(Joe.typeOf(thing)).eq(Thing);
    check(Joe.typeOf(Thing)).eq(Type);
    check(Joe.typeOf(Joe)).eq(Type);
}
