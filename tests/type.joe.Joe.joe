// Joe singleton tests.

//-------------------------------------------------------------------------
// Helper types

class Thing {
    method init(id, color) {
        this.id = id;
        this.color = color;
    }
}

class Gizmo extends Thing {
    method init(id, color) { super.init(id, color); }
}

class MyTextBuilder extends TextBuilder {
}

//-----------------------------------------------------------------------------
// compare()

function testCompare_string() {
    assertEQ(Joe.compare("a", "b"), -1);
    assertEQ(Joe.compare("b", "b"), 0);
    assertEQ(Joe.compare("c", "b"), 1);
}

function testCompare_number() {
    assertEQ(Joe.compare(0, 1), -1);
    assertEQ(Joe.compare(1, 1), 0);
    assertEQ(Joe.compare(2, 1), 1);
}

function testCompare_mismatch() {
    assertError(\-> Joe.compare(1, #a),
        "Expected two strings or two numbers.");
}

//-----------------------------------------------------------------------------
// Joe.getFieldNames()

function testGetFieldNames() {
    assertEQ(Joe.getFieldNames("abc"), []);
    assertEQ(Joe.getFieldNames(String), []);

    assertEQ(Joe.getFieldNames(Thing), []);
    Thing.x = 5;
    assertEQ(Joe.getFieldNames(Thing), ["x"]);

    var thing = Thing(123, "red");
    assertEQ(Joe.getFieldNames(thing).sorted(), ["color", "id"]);
}

//-----------------------------------------------------------------------------
// Joe.isOpaque()

function testIsOpaque() {
    assertT(Joe.isOpaque(JoeTest.OPAQUE));
    assertF(Joe.isOpaque("abc"));
}

//-----------------------------------------------------------------------------
// Joe.isType()

function testIsType() {
    assertT(Joe.isType(String));
    assertF(Joe.isType("abc"));
}

//-------------------------------------------------------------------------
// Joe.name()

function testName() {
    assertEQ(Joe.name(), "Joe");
}

//-----------------------------------------------------------------------------
// Joe.stringify()

// This just just verifies that the function exists; specific types
// test their own stringification.
function testStringify() {
    assertEQ(Joe.stringify("abc"), "abc");
    assertEQ(Joe.stringify(1.0), "1");
}

//-----------------------------------------------------------------------------
// Joe.supertypeOf()

function testSupertypeOf() {
    // Native Joe
    assertEQ(Joe.supertypeOf(String), null);

    // Scripted base class
    assertEQ(Joe.supertypeOf(Thing), null);

    // Subclass of scripted base class
    assertEQ(Joe.supertypeOf(Gizmo), Thing);

    // Native base class
    assertEQ(Joe.supertypeOf(TextBuilder), null);

    // Subclass of native base class
    assertEQ(Joe.supertypeOf(MyTextBuilder), TextBuilder);
}

//-----------------------------------------------------------------------------
// Joe.typeOf()

function testTypeOf() {
    var thing = Thing(123, "red");

    assertEQ(Joe.typeOf("abc"), String);
    assertEQ(Joe.typeOf(String), Type);
    assertEQ(Joe.typeOf(thing), Thing);
    assertEQ(Joe.typeOf(Thing), Type);
    assertEQ(Joe.typeOf(Joe), Type);
}
