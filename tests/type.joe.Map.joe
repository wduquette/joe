// type.joe.Map.joe: Map tests

function testOf_empty() {
    var map = Map.of();
    assertEQ(map, {:});
    assertT(map.isEmpty());
}

function testOf_entries() {
    var map = Map.of(#a, 1, #b, 2);
    assertF(map.isEmpty());
    assertEQ(map, {#a: 1, #b: 2});
}

function testOf_odd() {
    assertError(\-> Map.of(#a),
    "Expected an even number of arguments, got: '#a'."
    );
}

function testInitializer() {
    var map1 = Map();
    assertT(map1.isEmpty());
    assertEQ(map1.size(), 0);

    var map2 = Map({#a: 1, #b: 2});
    assertF(map2.isEmpty());
    assertEQ(map2.size(), 2);
    assertEQ(map2, {#a: 1, #b: 2});
}

function testClear() {
    var map = {#a: 1};
    map.clear();
    assertT(map.isEmpty());
    assertEQ(map.size(), 0);
}

function testContainsKey() {
    var map = {#a: 1};
    assertT(map.containsKey(#a));
    assertF(map.containsKey(#b));
}

function testContainsValue() {
    var map = {#a: 1};
    assertT(map.containsValue(1));
    assertF(map.containsKey(2));
}

function testCopy() {
    var map = {#a: 1};
    var map2 = map.copy();
    assertEQ(map2, map);
    map2.clear();
    assertF(map2 == map);
}

function testGet() {
    var map = {#a: 1};
    assertEQ(map.get(#a), 1);
    assertEQ(map.get(#b), null);
}

function testGetOrDefault() {
    var map = {#a: 1};
    assertEQ(map.getOrDefault(#a,0), 1);
    assertEQ(map.getOrDefault(#b,0), 0);
}

function testIsEmpty() {
    assertT({}.isEmpty());
    assertF({#a: 1}.isEmpty());
}

function testKeySet() {
    var map = {#a: 1, #b: 2};
    assertT(map.keySet().containsAll({#a, #b}));
}

function testPut() {
    var map = {:};
    map.put(#a, 1);
    assertEQ(map, {#a: 1});
    assertEQ(map.get(#a), 1);
}

function testPutAll() {
    var map1 = {#a: 1, #b: 2};
    var map2 = {#c: 3};
    map2.putAll(map1);
    assertEQ(map2, {#a: 1, #b: 2, #c: 3});
}

function testRemove() {
    var map = {#a: 1, #b: 2, #c: 3};
    assertEQ(map.remove(#b), 2);
    assertEQ(map, {#a: 1, #c: 3});
    assertEQ(map.remove(#d), null);
    assertEQ(map, {#a: 1, #c: 3});
}

function testSize() {
    assertEQ({}.size(), 0);
    assertEQ({#a: 1, #b: 2}.size(), 2);
}

function testToString() {
    assertEQ({#a: 1, #b: 2}.toString(), "{#a: 1, #b: 2}");
}

function testValues() {
    var map = {#a: 1, #b: 2};
    assertT(map.values().containsAll({1, 2}));
}

