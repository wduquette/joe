// type.joe.Fact.joe
//
// Tests for the `Fact` type

function testInitializer() {
    var fact = Fact("Thing", #car, #red);
    check(fact.relation()).eq("Thing");
    check(fact.isOrdered()).eq(true);
    check(fact.fields()).eq([#car, #red]);
    check(fact.fieldMap()).eq({"f0": #car, "f1": #red});
    check(fact.f0).eq(#car);
    check(fact.f1).eq(#red);
    check(fact.toString()).eq("Fact(Thing, #car, #red)");
}

function testOf() {
    var fact = Fact.of("Thing", [#car, #red]);
    check(fact.relation()).eq("Thing");
    check(fact.isOrdered()).eq(true);
    check(fact.fields()).eq([#car, #red]);
    check(fact.fieldMap()).eq({"f0": #car, "f1": #red});
    check(fact.f0).eq(#car);
    check(fact.f1).eq(#red);
    check(fact.toString()).eq("Fact(Thing, #car, #red)");
}

function testOfMap() {
    var fact = Fact.ofMap("Thing", {"id": #car, "color": #red});
    check(fact.relation()).eq("Thing");
    check(fact.isOrdered()).eq(false);
    check(fact.fieldMap()).eq({"id": #car, "color": #red});
    check(fact.id).eq(#car);
    check(fact.color).eq(#red);
}

function testOfPairs() {
    var fact = Fact.ofPairs("Thing", ["id", #car, "color", #red]);
    check(fact.relation()).eq("Thing");
    check(fact.isOrdered()).eq(true);
    check(fact.fields()).eq([#car, #red]);
    check(fact.fieldMap()).eq({"id": #car, "color": #red});
    check(fact.id).eq(#car);
    check(fact.color).eq(#red);
    check(fact.toString()).eq("Fact(Thing, #car, #red)");
}

function testBadField() {
    var fact = Fact("Thing", [#car, #red]);
    assertError(\-> fact.f2,
        "Undefined property 'f2'.");
}

function testMatch_listFact() {
    var fact = Fact("Thing", #car, #red);
    check(fact ~ Thing(#car, _)).eq(true);
    check(fact ~ Thing(#bus, _)).eq(false);
}

function testMatch_mapFact() {
    var fact = Fact.ofMap("Thing", {"id": #car, "color": #red});
    check(fact ~ Thing(#car, _)).eq(false);
    check(fact ~ Thing(id: #car)).eq(true);
}

function testMatch_recordFact() {
    var fact = Fact.ofPairs("Thing", ["id", #car, "color", #red]);
    check(fact ~ Thing(#car, _)).eq(true);
    check(fact ~ Thing(id: #car)).eq(true);
    check(fact ~ Thing(#bus, _)).eq(false);
    check(fact ~ Thing(id: #bus)).eq(false);
}
