// type.joe.Fact.joe
//
// Tests for the `Fact` type

function testInitializer_good() {
    var fact = Fact("Thing", #car, #red);
    assertEQ(fact.relation(), "Thing");
    assertT(fact.isOrdered());
    assertEQ(fact.fields(), [#car, #red]);
    assertEQ(fact.fieldMap(), {"f0": #car, "f1": #red});
    assertEQ(fact.f0, #car);
    assertEQ(fact.f1, #red);
    assertEQ(fact.toString(), "Fact(Thing, #car, #red)");
}

function testInitializer_badRelation() {
    assertError(\-> Fact("@Thing", #car, #red),
        "Expected identifier, got: String '@Thing'.");
}

function testOf() {
    var fact = Fact.of("Thing", [#car, #red]);
    assertEQ(fact.relation(), "Thing");
    assertT(fact.isOrdered());
    assertEQ(fact.fields(), [#car, #red]);
    assertEQ(fact.fieldMap(), {"f0": #car, "f1": #red});
    assertEQ(fact.f0, #car);
    assertEQ(fact.f1, #red);
    assertEQ(fact.toString(), "Fact(Thing, #car, #red)");
}

function testOf_badRelation() {
    assertError(\-> Fact.of("@Thing", [#car, #red]),
        "Expected identifier, got: String '@Thing'.");
}

function testOfMap() {
    var fact = Fact.ofMap("Thing", {"id": #car, "color": #red});
    assertEQ(fact.relation(), "Thing");
    assertF(fact.isOrdered());
    assertEQ(fact.fieldMap(), {"id": #car, "color": #red});
    assertEQ(fact.id, #car);
    assertEQ(fact.color, #red);
}

function testOfMap_badRelation() {
    assertError(\-> Fact.ofMap("@Thing", {"type": #car}),
        "Expected identifier, got: String '@Thing'.");
}

function testOfMap_badFieldName() {
    assertError(\-> Fact.ofMap("Thing", {"@type": #car}),
        "Expected identifier, got: String '@type'.");
}

function testOfPairs() {
    var fact = Fact.ofPairs("Thing", ["id", #car, "color", #red]);
    assertEQ(fact.relation(), "Thing");
    assertT(fact.isOrdered());
    assertEQ(fact.fields(), [#car, #red]);
    assertEQ(fact.fieldMap(), {"id": #car, "color": #red});
    assertEQ(fact.id, #car);
    assertEQ(fact.color, #red);
    assertEQ(fact.toString(), "Fact(Thing, #car, #red)");
}

function testOfPairs_badRelation() {
    assertError(\-> Fact.ofPairs("@Thing", ["type", #car]),
        "Expected identifier, got: String '@Thing'.");
}

function testOfPairs_badFieldName() {
    assertError(\-> Fact.ofPairs("Thing", ["@type", #car]),
        "Expected identifier, got: String '@type'.");
}

function testBadField() {
    var fact = Fact("Thing", [#car, #red]);
    assertError(\-> fact.f2,
        "Undefined property 'f2'.");
}

function testMatch_listFact() {
    var fact = Fact("Thing", #car, #red);
    assertT(fact ~ Thing(#car, _));
    assertF(fact ~ Thing(#bus, _));
}

function testMatch_mapFact() {
    var fact = Fact.ofMap("Thing", {"id": #car, "color": #red});
    assertF(fact ~ Thing(#car, _));
    assertT(fact ~ Thing(id: #car));
}

function testMatch_recordFact() {
    var fact = Fact.ofPairs("Thing", ["id", #car, "color", #red]);
    assertT(fact ~ Thing(#car, _));
    assertT(fact ~ Thing(id: #car));
    assertF(fact ~ Thing(#bus, _));
    assertF(fact ~ Thing(id: #bus));
}
