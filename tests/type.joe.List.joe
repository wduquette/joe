// List type tests

//-----------------------------------------------------------------------------
// List.of()

function testOf_empty() {
    assertEQ(List.of(), []);
}

function testOf_items() {
    assertEQ(List.of(1, 2, 3), [1, 2, 3]);
}


//-----------------------------------------------------------------------------
// List()

function testCreate_empty() {
    assertEQ(List(), []);
}

function testCreate_fromList() {
    assertEQ(List([1, 2, 3]), [1, 2, 3]);
}

function testCreate_withSize() {
    assertEQ(List(3), [null, null, null]);
}

function testCreate_withSizeAndValue() {
    assertEQ(List(3, "x"), ["x", "x", "x"]);
}

//-----------------------------------------------------------------------------
// add()

function testAdd_simple() {
    var list = [];
    assertEQ(list.add(1), [1]);
    assertEQ(list.add(2), [1, 2]);
    assertEQ(list.add(3), [1, 2, 3]);
}

function testAdd_index() {
    var list = [];
    assertEQ(list.add(1), [1]);
    assertEQ(list.add(0, 2), [2, 1]);
    assertEQ(list.add(1, 3), [2, 3, 1]);

    assertError(\-> list.add(-1, 4),
        "Expected 0 <= index < 4, got: Number '-1'.");
}

//-----------------------------------------------------------------------------
// addAll()

function testAddAll_simple() {
    var list = [1, 2];
    assertEQ(list.addAll([3, 4, 5]), [1, 2, 3, 4, 5]);

    assertError(\-> list.addAll(6),
        "Expected List, got: Number '6'.");
}

function testAddAll_index() {
    var list = [1, 5];
    assertEQ(list.addAll(1, [2, 3, 4]), [1, 2, 3, 4, 5]);

    assertError(\-> list.addAll(-1, []),
        "Expected 0 <= index < 6, got: Number '-1'.");
}

//-----------------------------------------------------------------------------
// clear()

function testClear() {
    var list = [1, 2, 3];
    assertEQ(list.clear(), []);
}

//-----------------------------------------------------------------------------
// contains()

function testContains() {
    var list = [1, 2, 3];
    assertEQ(list.contains(2), true);
    assertEQ(list.contains(4), false);
}

//-----------------------------------------------------------------------------
// containsAll()

function testContainsAll() {
    var list = [1, 2, 3];
    assertEQ(list.containsAll([2, 3]), true);
    assertEQ(list.containsAll([4]), false);
}

//-----------------------------------------------------------------------------
// copy()

function testCopy() {
    var a = [1, 2, 3];
    var b = a.copy();
    a.clear();
    assertEQ(a.size(), 0);
    assertEQ(b, [1, 2, 3]);
}

//-----------------------------------------------------------------------------
// filter()

function testFilter() {
    var list = [1, 2, 3, 4, 5];
    assertEQ(list.filter(\item -> true), list);
    assertEQ(list.filter(\item -> item > 3), [4, 5]);
    assertEQ(list.filter(\item -> item == "a"), []);
}

//-----------------------------------------------------------------------------
// find()

function testFind_notFound() {
    var list = ["abc", "def", "ghi", "efg"];
    var result = list.find(\s -> s.contains("xy"));
    assertEQ(result, null);
}

function testFind_noStart() {
    var list = ["abc", "def", "ghi", "efg"];
    var result = list.find(\s -> s.contains("ef"));
    assertEQ(result, [1, "def"]);
}

function testFind_start() {
    var list = ["abc", "def", "ghi", "efg"];
    var result = list.find(\s -> s.contains("ef"), 2);
    assertEQ(result, [3, "efg"]);
}

//-----------------------------------------------------------------------------
// testGet()

function testGet() {
    var list = [1, 2, 3];
    assertEQ(list.get(0), 1);
    assertEQ(list.get(2), 3);

    assertError(\-> list.get(4),
        "Expected 0 <= index < 3, got: Number '4'.");
}

//-----------------------------------------------------------------------------
// testGetFirst()

function testGetFirst() {
    var list = [1, 2, 3];
    assertEQ(list.getFirst(), 1);

    assertError(\-> [].getFirst(),
        "List is empty.");
}

//-----------------------------------------------------------------------------
// testGetLast()

function testGetLast() {
    var list = [1, 2, 3];
    assertEQ(list.getLast(), 3);

    assertError(\-> [].getLast(),
        "List is empty.");
}

//-----------------------------------------------------------------------------
// indexOf()

function testIndexOf() {
    var list = [1, 2, 3, 2, 1];
    assertEQ(list.indexOf(2), 1);
    assertEQ(list.indexOf(4), -1);
}

//-----------------------------------------------------------------------------
// isEmpty()

function testIsEmpty() {
    assertEQ([1].isEmpty(), false);
    assertEQ([].isEmpty(), true);
}

//-----------------------------------------------------------------------------
// lastIndexOf()

function testLastIndexOf() {
    var list = [1, 2, 3, 2, 1];
    assertEQ(list.lastIndexOf(2), 3);
    assertEQ(list.lastIndexOf(4), -1);
}

//-----------------------------------------------------------------------------
// map()

function testMap() {
    var list = [1, 2, 3];
    assertEQ(list.map(\x -> 2*x), [2, 4, 6]);
}

//-----------------------------------------------------------------------------
// testPeekFirst()

function testPeekFirst() {
    var list = [1, 2, 3];
    assertEQ(list.peekFirst(), 1);
    assertEQ([].peekFirst(), null);
}

//-----------------------------------------------------------------------------
// testPeekLast()

function testPeekLast() {
    var list = [1, 2, 3];
    assertEQ(list.peekLast(), 3);
    assertEQ([].peekLast(), null);
}

//-----------------------------------------------------------------------------
// testRemove()

function testRemove() {
    var list = [1, 2, 3];
    assertEQ(list.remove(2), true);
    assertEQ(list, [1, 3]);

    assertEQ(list.remove(2), false);
}

//-----------------------------------------------------------------------------
// testRemoveAll()

function testRemoveAll() {
    var list = [1, 2, 3];
    assertEQ(list.removeAll([2]), true);
    assertEQ(list, [1, 3]);

    assertEQ(list.removeAll([4]), false);
}

//-----------------------------------------------------------------------------
// testRemoveAt()

function testRemoveAt() {
    var list = [1, 2, 3];
    assertEQ(list.removeAt(1), 2);
    assertEQ(list, [1, 3]);

    assertError(\-> list.removeAt(-1),
        "Expected 0 <= index < 2, got: Number '-1'.");
}

//-----------------------------------------------------------------------------
// testRemoveFirst()

function testRemoveFirst() {
    var list = [1, 2, 3];
    assertEQ(list.removeFirst(), 1);

    assertError(\-> [].removeFirst(),
        "List is empty.");
}

//-----------------------------------------------------------------------------
// testRemoveLast()

function testRemoveLast() {
    var list = [1, 2, 3];
    assertEQ(list.removeLast(), 3);

    assertError(\-> [].removeLast(),
        "List is empty.");
}

//-----------------------------------------------------------------------------
// reversed()

function testReversed() {
    var list = [1, 2, 3];
    assertEQ(list.reversed(), [3, 2, 1]);
}

//-----------------------------------------------------------------------------
// set()

function testSet() {
    var list = [1, 2, 3];
    assertEQ(list.set(1, "x"), 2);
    assertEQ(list, [1, "x", 3]);
}

//-----------------------------------------------------------------------------
// size()

function testSize() {
    assertEQ([].size(), 0);
    assertEQ([1,2,3].size(), 3);
}

//-----------------------------------------------------------------------------
// sorted()

function testSorted_goodNoComp() {
    var list = [5, 4, 3, 2, 1];
    assertEQ(list.sorted(), [1, 2, 3, 4, 5]);

    var list2 = ["e", "d", "c", "b", "a"];
    assertEQ(list2.sorted(), ["a", "b", "c", "d", "e"]);
}

function testSorted_goodComp() {
    var list = [5, 4, 3, 2, 1];
    assertEQ(list.sorted(Joe.compare), [1, 2, 3, 4, 5]);

    var list2 = ["e", "d", "c", "b", "a"];
    assertEQ(list2.sorted(Joe.compare), ["a", "b", "c", "d", "e"]);
}

function testSorted_descending() {
    var list = [1,2,3,4,5];
    assertEQ(list.sorted(\a,b -> -Joe.compare(a,b)), [5,4,3,2,1]);
}

function testSorted_mismatch() {
    var list = [5, "d", 3, "b", 1];
    assertError(\-> list.sorted(),
        "Expected two strings or two numbers.");
}

function testSorted_badComp() {
    var list = [5, 4, 3, 2, 1];
    assertError(\-> list.sorted(\a,b -> "abc"),
        "Expected number, got: String 'abc'.");
}


//-----------------------------------------------------------------------------
// sublist()

function testSublist() {
    var list = [1, 2, 3, 4, 5];
    assertEQ(list.sublist(1), [2, 3, 4, 5]);
    assertEQ(list.sublist(1, 3), [2, 3]);
}

