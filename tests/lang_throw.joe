// Tests for the `throw` statement
//
// Language tests should confine themselves to the basic test API.

function testThrowString() {
    skip("Pending stack trace cleanup completion.");
    assertError(\-> { throw "Simulated Error."; }
        , "Simulated Error."
        , "In lambda \\ -> ...");
}

function testThrowAnything() {
    skip("Pending stack trace cleanup completion.");
    assertError(\-> { throw #bogus; }
        , "#bogus"
        , "In lambda \\ -> ...");
}

function testRethrow_withFrame() {
    skip("Pending stack trace cleanup completion.");
    var tuple = catch(\-> { throw "Simulated Error."; });
    var err = tuple.error;
    err.stackFrames().add("Added detail.");
    assertError(\-> { throw err; }
        , "Simulated Error."
        , "In lambda \\ -> ..."
        , "Added detail."
        , "In lambda \\ -> ...");
}

function testStackFrames() {
    skip("Pending stack trace cleanup completion.");
    function ted(a, b) {
        throw "Simulated Error";
    }

    function dave(x, y) {
        ted(x, x * y);
    }

    function bob(a, b) {
        dave(a, a + b);
    }

    assertError(\-> bob(2, 3)
        , "Simulated Error"
        , "In function ted(2, 10)"
        , "In function dave(2, 5)"
        , "In function bob(2, 3)"
        , "In lambda \\ -> ..."
    );
}

function testNativeFunction_stackFrames() {
    skip("Pending stack trace cleanup completion.");
    assertError(\-> println(1, 2)
        , "Wrong number of arguments, expected: println([text])."
        , "In native function println(1, 2)"
        , "In lambda \\ -> ..."
    );
}