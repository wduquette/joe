// Tests for the `throw` statement
//
// Language tests should confine themselves to the basic test API.

// NOTE: This version of the tests omits the detailed stack trace.

function thrower() { throw "Simulated Error."; }

function testThrowString() {
    assertError(thrower
        , "Simulated Error.");
}

function testThrowAnything() {
    function thrower() { throw #bogus; }
    assertError(thrower
        , "#bogus");
}

// Requires `catch`, `Tuple`

//function testRethrow_withFrame() {
//    var tuple = catch(\-> { throw "Simulated Error."; });
//    var err = tuple.error;
//    err.addInfo("Added detail.");
//    assertError(\-> { throw err; }
//        , "Simulated Error."
//        , "In lambda \\"
//        , "In java call(<lambda \\>)"
//        , "Called from catch()"
//        , "Added detail.");
//}

//function testStackFrames() {
//    function ted(a, b) {
//        throw "Simulated Error";
//    }
//
//    function dave(x, y) {
//        ted(x, x * y);
//    }
//
//    function bob(a, b) {
//        dave(a, a + b);
//    }
//
//    assertError(\-> bob(2, 3)
//        , "Simulated Error"
//        , "In function ted(a, b)"
//        , "In function dave(x, y)"
//        , "In function bob(a, b)"
//        , "In lambda \\"
//    );
//}

//function testNativeFunction_stackFrames() {
//    assertError(\-> println(1, 2)
//        , "Wrong number of arguments, expected: println([text])."
//        , "In native function println(...)"
//        , "In lambda \\"
//    );
//}