// Tests for the throw statement

function testThrowString() {
    checkCatch(\-> { throw "Simulated Error."; })
        .message("Simulated Error.")
        .stackFrames(
            "In lambda \\ -> ..."
        );
}

function testThrowAnything() {
    checkCatch(\-> { throw #bogus; })
        .message("#bogus")
        .stackFrames(
            "In lambda \\ -> ..."
        );
}

function testRethrow_withFrame() {
    var tuple = catch(\-> { throw "Simulated Error."; });
    var err = tuple.error;
    err.stackFrames().add("Added detail.");
    checkCatch(\-> { throw err; })
        .message("Simulated Error.")
        .stackFrames(
            "In lambda \\ -> ...",
            "Added detail.",
            "In lambda \\ -> ..."
        );
}

function testStackFrames() {
    function ted(a, b) {
        throw "Simulated Error";
    }

    function dave(x, y) {
        ted(x, x * y);
    }

    function bob(a, b) {
        dave(a, a + b);
    }

    checkCatch(\-> bob(2, 3))
        .message("Simulated Error")
        .stackFrames(
            "In function ted(2, 10)",
            "In function dave(2, 5)",
            "In function bob(2, 3)",
            "In lambda \\ -> ..."
        );
}

function testNativeFunction_stackFrames() {
    checkCatch(\-> println(1, 2))
        .message("Wrong number of arguments, expected: println([text]).")
        .stackFrames(
            "In native function println(1, 2)",
            "In lambda \\ -> ..."
        );
}