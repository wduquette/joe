// lang_ruleset.joe
//
// The purpose of this test suite is to look for semantic errors, found on
// rule set creation, e.g., undefined fact types.  The `type.joe.RuleSet.joe`
// test suite tests the behavior of the `RuleSet` object once created.

function testValid() {
    var rules = ruleset {
        Parent(#walker, #bert);
        Parent(#bert, #clark);
        Ancestor(x, y) :- Parent(x, y);
        Ancestor(x, y) :- Parent(x, z), Ancestor(z, y);
    };
}

// A simple `export` must name a callable in the current scope.
function testExport_good() {
    record Ancestor(a, d) {}
    var rules = ruleset {
        export Ancestor;
        Ancestor(x, y) :- Parent(x, y);
    };
}

// A simple `export` must name a callable in the current scope.
function testExport_bad() {
    assertError(\-> ruleset {
        export Ancestor;
        Ancestor(x, y) :- Parent(x, y);
    }, "Undefined variable: 'Ancestor'.");
}

// An `export as` must provide an expression that's valid in the
// current scope.
function testExportAs_good() {
    var rules = ruleset {
        export Ancestor as \x,y -> [x, y];
        Ancestor(x, y) :- Parent(x, y);
    };
}

// An `export as` must provide an expression that's valid in the
// current scope.
function testExport_bad() {
    assertError(\-> ruleset {
        export Ancestor as MyAncestor;
        Ancestor(x, y) :- Parent(x, y);
    }, "Undefined variable: 'MyAncestor'.");
}
