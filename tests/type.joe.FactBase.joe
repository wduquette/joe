// type.joe.FactBase.joe
//
// This script tests the behavior of FactBase objects.

//-----------------------------------------------------------------------------
// Helper types

record Parent(parent, child) {}
record Ancestor(ancestor, descendant) {}
record Person(name, age) {}
record Place(id) {}
record Thing(id, color) {}

var JOE = Person(#joe, 90);
var JOE_FACT = Joe.toFact(JOE);
var TEXAS = Place(#texas);
var TEXAS_FACT = Joe.toFact(TEXAS);
var HAT = Thing(#hat, #black);
var HAT_FACT = Joe.toFact(HAT);

//-----------------------------------------------------------------------------
// Creation

function testCreation_empty() {
    var db = FactBase();
    assertEmpty(db);
    assertEQ(db.size(), 0);
    assertT(db.all().isEmpty());
    assertT(db.relations().isEmpty());
    assertT(db.relation("Thing").isEmpty());
    assertEQ(db.toString(), "FactBase[0]");
}

function testCreation_collection() {
    var db = FactBase([JOE, TEXAS, HAT]);
    assertF(db.isEmpty());
    assertEQ(db.size(), 3);
    assertF(db.all().isEmpty());
    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT, HAT_FACT});
    assertF(db.relations().isEmpty());
    assertEQ(db.relations(), {"Person", "Place", "Thing"});
    assertEQ(db.relation("Person"), {JOE_FACT});
    assertEQ(db.toString(), "FactBase[3, Person[1], Place[1], Thing[1]]");
}

function testCreation_FactBase() {
    var other = FactBase([JOE, HAT]);

    var db = FactBase(other);
    assertF(db.isEmpty());
    assertEQ(db.size(), 2);
    assertF(db.all().isEmpty());
    assertEQ(db.all(), other.all());
    assertF(db.relations().isEmpty());
    assertEQ(db.relations(), other.relations());
    assertEQ(db.relation("Person"), other.relation("Person"));
    assertEQ(db.toString(), "FactBase[2, Person[1], Thing[1]]");
}

function testCreation_badInputs() {
    var inputs = ["abc"];

    assertError(\-> FactBase(inputs),
        "Expected Nero-compatible fact, got: String 'abc'.");
}

//-------------------------------------------------------------------------
// Can Iterate

function testIterable() {
    var db = FactBase([JOE, TEXAS, HAT]);

    var set = Set();
    foreach(fact : db) set.add(fact);
    assertEQ(set, db.all());
}


//-------------------------------------------------------------------------
// add

function testAdd_good() {
    var db = FactBase();

    db.add(JOE);

    assertEQ(db.all(), {JOE_FACT});
    assertEQ(db.relation("Person"), {JOE_FACT});
    assertEQ(db.relations(), {"Person"});
}

function testAdd_bad() {
    var db = FactBase();

    assertError(\-> db.add("abc"),
        "Expected Nero-compatible fact, got: String 'abc'.");
}

//-------------------------------------------------------------------------
// addAll

function testAddAll_collection() {
    var db = FactBase();
    db.addAll([JOE, HAT]);
    assertEQ(db.all(), {JOE_FACT, HAT_FACT});
    assertEQ(db.relation("Person"), {JOE_FACT});
}

function testAddAll_FactBase() {
    var db = FactBase();
    var other = FactBase([JOE, HAT]);

    db.addAll(other);
    assertEQ(db.all(), other.all());
    assertEQ(db.relation("Person"), other.relation("Person"));
}

function testAddAll_badInputs() {
    var inputs = ["abc"];
    var db = FactBase();

    assertError(\-> db.addAll(inputs),
        "Expected Nero-compatible fact, got: String 'abc'.");
}

//-------------------------------------------------------------------------
// all

// Tested in use by other tests

//-------------------------------------------------------------------------
// clear

function testClear() {
    var db = FactBase();
    db.add(JOE);
    db.clear();
    assertT(db.isEmpty());
    assertEQ(db.size(), 0);
    assertT(db.all().isEmpty());
    assertT(db.relations().isEmpty());
}

//-------------------------------------------------------------------------
// drop

function testDrop() {
    var db = FactBase([JOE, TEXAS, HAT]);
    db.drop("Thing");
    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT});
    assertEQ(db.relation("Thing"), Set());
}

//-------------------------------------------------------------------------
// filter

function testFilter() {
    var db = FactBase([JOE, TEXAS, HAT]);

    var set = db.filter(\f -> f ~ Person());
    assertEQ(set, {JOE_FACT});
}

//-------------------------------------------------------------------------
// isDebug/setDebug

function testDebug_setGet() {
    var db = FactBase();
    assertF(db.isDebug());
    db.setDebug(true);
    assertT(db.isDebug());
    db.setDebug(false);
    assertF(db.isDebug());
}

//-------------------------------------------------------------------------
// isEmpty

// Tested in use by other tests

//-------------------------------------------------------------------------
// map

function testMap() {
    var db = FactBase([JOE, TEXAS, HAT]);
    var strings = db.map(Joe.stringify).sorted();
    assertEQ(strings, [
        "Fact(Person, #joe, 90)",
        "Fact(Place, #texas)",
        "Fact(Thing, #hat, #black)"
    ]);
}

//-------------------------------------------------------------------------
// relation

// Tested in use by other tests

//-------------------------------------------------------------------------
// relations

// Tested in use by other tests

//-------------------------------------------------------------------------
// remove

function testRemove_good() {
    var db = FactBase([JOE, TEXAS, HAT]);
    db.remove(HAT);

    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT});
    assertEQ(db.relation("Thing"), Set());
}

function testRemove_bad() {
    var inputs = [
        Parent(#anne, #bert),
        Parent(#bert, #clark)
    ];
    var db = FactBase(inputs);

    assertError(\-> db.remove("abc"),
        "Expected Nero-compatible fact, got: String 'abc'.");
}

//-------------------------------------------------------------------------
// removeAll

function testRemoveAll_collection() {
    var db = FactBase([JOE, TEXAS, HAT]);
    db.removeAll([HAT]);

    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT});
    assertEQ(db.relation("Thing"), Set());
}

function testRemoveAll_FactBase() {
    var db = FactBase([JOE, TEXAS, HAT]);
    var other = FactBase([HAT]);
    db.removeAll(other);

    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT});
    assertEQ(db.relation("Thing"), Set());
}

function testRemoveAll_bad() {
    var db = FactBase();

    assertError(\-> db.removeAll(["abc"]),
        "Expected Nero-compatible fact, got: String 'abc'.");
}

//-------------------------------------------------------------------------
// removeIf

function testRemoveIf() {
    var db = FactBase([JOE, TEXAS, HAT]);
    db.removeIf(\f -> f ~ Thing());
    assertEQ(db.all(), {JOE_FACT, TEXAS_FACT});
    assertEQ(db.relation("Thing"), Set());
}

//-------------------------------------------------------------------------
// rename

function testRename() {
    var db = FactBase([JOE, TEXAS, HAT]);
    var newFact = Fact.ofPairs("Location", ["id", #texas]);
    db.rename("Place", "Location");
    assertEQ(db.all(), {JOE_FACT, newFact, HAT_FACT});
    assertEQ(db.relation("Place"), Set());
    assertEQ(db.relation("Location"), {newFact});
}

//-------------------------------------------------------------------------
// select

function testSelect_facts() {
    var db = FactBase([
        Parent(#anne, #bert),
        Parent(#bert, #clark)
    ]);

    var results = db.select(ruleset {
        Ancestor(x, y) :- Parent(x, y);
        Ancestor(x, y) :- Parent(x, z), Ancestor(z, y);
    });

    var expected = {
        Fact("Ancestor", #anne, #bert),
        Fact("Ancestor", #anne, #clark),
        Fact("Ancestor", #bert, #clark)
    };
    assertEQ(results, expected);
}


//-------------------------------------------------------------------------
// size

// Tested in use by other tests

//-------------------------------------------------------------------------
// toString

// Test in use by other tests

//-------------------------------------------------------------------------
// update

function testUpdate_good() {
    var db = FactBase([
        Parent(#anne, #bert),
        Parent(#bert, #clark)
    ]);

    db.update(ruleset {
        Ancestor(x, y) :- Parent(x, y);
        Ancestor(x, y) :- Parent(x, z), Ancestor(z, y);
    });

    var expected = {
        Fact("Ancestor", #anne, #bert),
        Fact("Ancestor", #anne, #clark),
        Fact("Ancestor", #bert, #clark)
    };

    // The relation's set was updated.
    assertEQ(db.relation("Ancestor"), expected);

    // The set of all facts was updated.
    assertT(db.all().containsAll(expected));
}

