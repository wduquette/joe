// Class and Instance Tests
//
// TODO: Incomplete

function testInit() {
    var thing = Thing("Fred", #green);
    check(thing.name).eq("Fred");
    check(thing.color).eq(#green);
}

function testCanSetFields() {
    var thing = Thing("Fred", #green);
    thing.name = "George";
    thing.color = #ginger;
    check(thing.name).eq("George");
    check(thing.color).eq(#ginger);
}

function testCanCallMethods() {
    var thing = Thing("Fred", #green);
    check(thing.info()).eq("name='Fred' color='#green'");
}

function testStaticMethods() {
    class WithStatics {
        static method greeting() {
            return #howdy;
        }
        static method howdy() {
            return WithStatics.greeting();
        }
    }

    check(WithStatics.greeting()).eq(#howdy);
    check(WithStatics.howdy()).eq(#howdy);
}

function testClassCapturesScope() {
    var greeting = #howdy;

    class WithStatics {
        static method howdy() {
            return greeting;
        }
    }

    check(WithStatics.howdy()).eq(#howdy);
}

function testStaticInitializer() {
    class WithStatics {
        static {
            WithStatics.greeting = #howdy;
        }
        static method howdy() {
            return WithStatics.greeting;
        }
    }

    check(WithStatics.greeting).eq(#howdy);
    check(WithStatics.howdy()).eq(#howdy);
}

function testCanSubclass() {
    class Parent {
        method init(taste) { this.taste = taste; }
        method getTaste() { return this.taste; }
    }

    class Child extends Parent {
        method init(taste, color) {
            super.init(taste);
            this.color = color;
        }
        method getColor() { return this.color; }
    }

    var kid = Child(#sweet, #red);
    check(kid.getTaste()).eq(#sweet);
    check(kid.getColor()).eq(#red);
}

function testThisInNestedFunction() {
    class Nest {
        method init() { @name = "Howard"; }
        method whoAmI() {
            function getName() {
                return this.name;
            }
            return getName();
        }
    }

    assertEquals(Nest().whoAmI(), "Howard");
}

function testAtInNestedFunction() {
    class Nest {
        method init() { @name = "Howard"; }
        method whoAmI() {
            function getName() {
                return @name;
            }
            return getName();
        }
    }

    assertEquals(Nest().whoAmI(), "Howard");
}

function testSuperInNestedFunction() {
    class Parent {
        method name() { return "Howard"; }
    }
    class Child extends Parent {
        method name() {
            function getName() {
                return "*" + super.name() + "*";
            }
            return getName();
        }
    }

    assertEquals(Child().name(), "*Howard*");
}


//-----------------------------------------------------------------------------
// `@` operator

function testCanUseAt() {
    var thing = AtThing("Fred", "red");
    check(thing.info()).eq("name='Fred' color='red'");
}

//-----------------------------------------------------------------------------
// Helpers

class Thing {
    method init(name, color) {
        this.name = name;
        this.color = color;
    }

    method info() {
        return "name='" + this.name + "' color='" + this.color + "'";
    }
}

class AtThing {
    method init(name, color) {
        @name = name;
        @color = color;
    }

    method info() {
        return "name='" + @name + "' color='" + @color + "'";
    }
}

