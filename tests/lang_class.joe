// Tests for the `class` declaration and class behavior.
//
// Language tests should confine themselves to the basic test API.

//-----------------------------------------------------------------------------
// Declaration and Creation

// Can declare a class
function testDeclare() {
    class Thing {}
    assertEquals(typeName(Thing), "<class>");
}

// Can create instances
function testCreate() {
    class Thing {}
    var thing = Thing();
    assertEquals(typeName(thing), "Thing");
}

//-----------------------------------------------------------------------------
// Fields

// Scripts can directly set and get an instance's fields.
function testSetGetFields() {
    class Thing {}
    var thing = Thing();
    thing.name = "George";
    thing.color = #ginger;
    assertEquals(thing.name, "George");
    assertEquals(thing.color, #ginger);
}

//-----------------------------------------------------------------------------
// Methods

// Can declare and call methods.
function testDeclareMethod() {
    class Thing {
        method info() { return "I'm a Thing!"; }
    }
    assertEquals(Thing().info(), "I'm a Thing!");
}

// Method arity is checked.
function testMethod_tooFewArgs() {
    class Thing {
        method twoArgs(name, value) { }
    }

    function bad() { Thing().twoArgs(#a); }
    assertError(bad, "Wrong number of arguments, expected: twoArgs(name, value).");
}

// Method arity is checked.
function testMethod_tooManyArgs() {
    class Thing {
        method twoArgs(name, value) { }
    }

    function bad() { Thing().twoArgs(#a, #b, #c); }
    assertError(bad, "Wrong number of arguments, expected: twoArgs(name, value).");
}

// Varargs method
function testMethod_varargs_good() {
    class Thing {
        method varArgs(first, args) {
            return first + "," + stringify(args);
        }
    }
    var thing = Thing();

    assertEquals(thing.varArgs(#a), "#a,List()");
    assertEquals(thing.varArgs(#a,#b), "#a,List(#b)");
    assertEquals(thing.varArgs(#a,#b,#c), "#a,List(#b, #c)");

    function bad() { thing.varArgs(); }
    assertError(bad,
        "Wrong number of arguments, expected: varArgs(first, args).");
}

// Methods can capture enclosing scope.
function testMethodsCaptureScope() {
    var greeting = #howdy;

    class WithStatics {
        method howdy() {
            return greeting;
        }
    }

    assertEquals(WithStatics().howdy(), #howdy);
}

//-----------------------------------------------------------------------------
// Initializer

// The initializer is called on creation, if defined.
function testInitializer() {
    class Thing {
        method init(name, color) {
            this.name = name;
            this.color = color;
        }
    }

    var thing = Thing("Fred", #green);
    assertEquals(thing.name, "Fred");
    assertEquals(thing.color, #green);
}

//-----------------------------------------------------------------------------
// toString()

// Default toString()
function testToString_default() {
    class Thing {}
    var thing = Thing();
    assertTrue(thing.toString().startsWith("<Thing"));
    assertEquals(stringify(thing), thing.toString());
}

// Custom toString()
function testToString_custom() {
    class Thing {
        method toString() { return "I'm a Thing!"; }
    }
    var thing = Thing();
    assertEquals(thing.toString(), "I'm a Thing!");
    assertEquals(stringify(thing), thing.toString());
}

//-----------------------------------------------------------------------------
// Static Methods

// A class can define static methods, which can then be called.
function testDeclareStaticMethod() {
    class WithStatics {
        static method greeting() {
            return #howdy;
        }
    }

    assertEquals(WithStatics.greeting(), #howdy);
}

// Static Methods can call each other.
function testStaticMethods() {
    class WithStatics {
        static method greeting() {
            return #howdy;
        }
        static method howdy() {
            return WithStatics.greeting();
        }
    }

    assertEquals(WithStatics.howdy(), #howdy);
}

// Static methods can capture enclosing scope.
function testStaticMethodsCaptureScope() {
    var greeting = #howdy;

    class WithStatics {
        static method howdy() {
            return greeting;
        }
    }

    assertEquals(WithStatics.howdy(), #howdy);
}

//-----------------------------------------------------------------------------
// Static Fields

// Script can set and get static class fields
function testStaticFields() {
    class Thing {}
    Thing.greeting = #howdy;

    assertEquals(Thing.greeting, #howdy);
}

// Methods can use static class fields
function testStaticFields_instanceMethods() {
    class Thing {
        method howdy() { return Thing.greeting; }
    }
    Thing.greeting = #howdy;

    assertEquals(Thing().howdy(), #howdy);
}

// Static methods can use static class fields
function testStaticFields_staticMethods() {
    class Thing {
        static method howdy() { return Thing.greeting; }
    }
    Thing.greeting = #howdy;

    assertEquals(Thing.howdy(), #howdy);
}

//-----------------------------------------------------------------------------
// Static Initializer

// The static initializer can initialize static fields
function testStaticInitializer_initVars() {
    class Thing {
        static {
            Thing.greeting = #howdy;
        }
    }

    assertEquals(Thing.greeting, #howdy);
}

// The static initializer can call static methods
function testStaticInitializer_initCallsStatics() {
    class Thing {
        static {
            Thing.greeting = Thing.defaultGreeting();
        }
        static method defaultGreeting() { return #howdy; }
    }

    assertEquals(Thing.greeting, #howdy);
}

// The static initializer can create instances
function testStaticInitializer_initCallsStatics() {
    class Thing {
        static {
            Thing.instance = Thing();
        }
    }

    assertEquals(typeName(Thing.instance), "Thing");
}

//-----------------------------------------------------------------------------
// Subclasses

// A class can extend a superclass, and use its methods.
function testSubclass_callParentMethod() {
    class Parent {
        method parent() { return #parent; }
    }

    class Child extends Parent {
        method child() { return #child; }
    }

    var kid = Child();
    assertEquals(kid.parent(), #parent);
    assertEquals(kid.child(), #child);
}

// A subclass can override a superclass method
function testSubclass_overrideParentMethod() {
    class Parent {
        method parent() { return #parent; }
    }

    class Child extends Parent {
        method parent() { return #child; }
    }

    var kid = Child();
    assertEquals(kid.parent(), #child);
}

// A subclass will make use of the parent's init() if it doesn't define one
function testSubclass_parentInitializer() {
    class Parent {
        method init() {
            this.name = "Parent";
        }
    }

    class Child extends Parent {
        method getName() { return this.name; }
    }

    var kid = Child();
    assertEquals(kid.getName(), "Parent");
}

// A subclass will make use of the parent's init() if it doesn't define one.
// A subclass can call a superclass method using `super.`
function testSubclass_callSuper() {
    class Parent {
        method getName() { return #parent; }
    }

    class Child extends Parent {
        method getName() { return super.getName(); }
    }
    var kid = Child();
    assertEquals(kid.getName(), #parent);
}

//-----------------------------------------------------------------------------
// `@` operator

// `@` can be used instead of `this.`
function testCanUseAt() {
    class Thing {
        method init(name, color) {
            @name = name;
            @color = color;
        }

        method info() {
            return "name='" + @name + "' color='" + @color + "'";
        }
    }
    var thing = Thing("Fred", "red");
    assertEquals(thing.info(), "name='Fred' color='red'");
}

//-------------------------------------------------------------------------
// Nested Scopes

// `this.` is available in functions nested in methods
function testThisInNestedFunction() {
    class Nest {
        method init() { this.name = "Howard"; }
        method whoAmI() {
            function getName() {
                return this.name;
            }
            return getName();
        }
    }

    assertEquals(Nest().whoAmI(), "Howard");
}

// `@` is available in functions nested in methods
function testAtInNestedFunction() {
    class Nest {
        method init() { @name = "Howard"; }
        method whoAmI() {
            function getName() {
                return @name;
            }
            return getName();
        }
    }

    assertEquals(Nest().whoAmI(), "Howard");
}

// `super` is available in functions nested in methods
function testSuperInNestedFunction() {
    class Parent {
        method name() { return "Howard"; }
    }
    class Child extends Parent {
        method name() {
            function getName() {
                return "*" + super.name() + "*";
            }
            return getName();
        }
    }

    assertEquals(Child().name(), "*Howard*");
}


