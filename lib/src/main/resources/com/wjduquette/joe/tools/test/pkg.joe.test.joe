// `joe test`'s Test Library

//**
// @package joe.test
// @title Joe Test Tool API
// This package defines the test assertions and checkers that are available
// for use in `joe test` test suites.

//**
// @function check
// @args value
// @result ValueChecker
// Returns a checker for testing a computed value.
function check(value) {
    return ValueChecker(value);
}

//**
// @function checkCatch
// @args callable
// @result CatchChecker
// Executes a no-arg *callable* and returns a checker for checking
// the error result.
function checkCatch(callable) {
    return CatchChecker(catch(callable));
}

//**
// @type ValueChecker
// A fluent test checker for arbitrary values.
// Use `check(value)` to create one.
class ValueChecker {
    //**
    // @init
    // @args value
    // Initializes the new checker with the given *value*.
    method init(value) {
        this.value = value;
    }

    //**
    // @method eq
    // @args expected
    // @result this
    // Checks that the value is equal to the *expected* value.
    method eq(expected) {
        assert this.value == expected, this._expected(_typedValue(expected));
        return this;
    }

    //**
    // @method isTrue
    // @result this
    // Checks that the value is truthy.
    method isTrue() {
        assert this.value, this._expected("true");
        return this;
    }

    //**
    // @method isFalse
    // @result this
    // Checks that the value is falsey.
    method isFalse() {
        assert !this.value, this._expected("false");
        return this;
    }

    //**
    // @method isNull
    // @result this
    // Checks that the value is `null`
    method isNull() {
        assert this.value == null, this._expected("null");
        return this;
    }

    //**
    // @method isNotNull
    // @result this
    // Checks that the value is not `null`
    method isNonNull() {
        assert this.value != null, this._expected("non-null");
        return this;
    }

    //**
    // @method isEmpty
    // @result this
    // Checks that the value `isEmpty()` according to its own `isEmpty()`
    // method.
    method isEmpty() {
        assert this.value.isEmpty(), this._expected("isEmpty()");
    }

    //**
    // @method containsAll
    // @args values...
    // @result this
    // Assumes that the value is a collection, and verifies that it
    // contains all of the expected arguments.
    method containsAll(args) {
        // TODO: Need predicate to check for a collection
        foreach (var arg : args) {
            if (!this.value.contains(arg)) {
                fail("Expected collection to contain " +
                    typeName(arg) + " '" + arg + "' got: '" +
                    args + "'.");
            }
        }
    }

    //**
    // @method hasTypeName
    // @args name
    // @result this
    // Checks that the value's `typeName()` is the given *name*.
    method hasTypeName(name) {
        var got = typeName(this.value);
        assert got == name,
            this._expected2("type name '" + name + "'", got);
    }

    method _expected(what) {
        return "Expected " + what + ", got: " +
            _typedValue(this.value) + ".";
    }
    method _expected2(what, got) {
        return "Expected " + what + ", got: " +
            _typedValue(got) + ".";
    }
}

//**
// @type CatchChecker
// A fluent test checker for `catch()` results.
// Use `checkCatch(callable)` to create it.
class CatchChecker {
    //**
    // @init
    // @args pair
    // Initializes the checker with the result of a `catch()`.
    method init(pair) {
        this.pair = pair;
        this.err = pair.left() == #error ? pair.right() : null;
    }

    //**
    // @method isOK
    // @result this
    // Checks that the catch result is not an error.
    method isOK() {
        assert this.err == null,
            "Expected no error, got: '"
            + this.err.message() + "'.";
        return this;
    }

    //**
    // @method isError
    // @result Boolean
    // Returns `true` if there was an error, and `false` otherwise.
    method isError() {
        assert this.err != null, "Expected an error, got: "
            + typeName(this.pair.right())
            + " '" + codify(this.pair.right()) + "'.";
        return this;
    }

    //**
    // @method message
    // @args expected
    // @result this
    // Checks that the error message matches the *expected* value.
    method message(expected) {
        this.isError();
        assert this.err.message() == expected,
            "Expected message '" + expected + "', got: '" +
            this.err.message() + "'.";
        return this;
    }

    //**
    // @method type
    // @args expected
    // @result this
    // Checks the error type matches the *expected* value.
    method type(expected) {
        this.isError();
        assert this.err.type() == expected,
            "Expected error type '" + expected + "', got: '" + this.err.type() + "'.";
        return this;
    }

    //**
    // @method stackFrames
    // @args frame,...
    // @result this
    // Checks that the actual stack frames match the expected list of
    // stack frames. The expected frames are passed as individual arguments.
    method stackFrames(args) {
        this.isError();
        assert this.err.stackFrames() == args,
            "Expected stack frames '" + args + "', got: '" + this.err.stackFrames() + "'.";
        return this;
    }

    //**
    // @method stackTrace
    // @args expected
    // @result this
    // Checks that the actual stack traces matches the expected stack trace
    // string.
    method stackTrace(expected) {
        this.isError();
        assert this.err.stackTrace() == expected,
            "Expected stack trace '" + expected + "', got: '" + this.err.stackTrace() + "'.";
        return this;
    }
}

function _typedValue(value) {
    if (value == null) {
        return "'null'";
    } else {
        return typeName(value) + " '" + codify(value) + "'";
    }
}
